{
  "language": "Solidity",
  "sources": {
    "contracts/ChainFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nerror Withdraw_NotSuccessful();\r\n\r\ncontract ChainFund {\r\n    address[] private funders;\r\n    // Funders and the amount they funded\r\n    mapping(address => uint256) private addressToAmountFunded;\r\n    // Campaign and its funders\r\n    mapping(uint256 => address[]) private campaignFundedBy;\r\n    // Campaign and its total amount funded\r\n    mapping(uint256 => uint256) private campaignAmountFunded;\r\n\r\n    function fund(uint256 campaignId) public payable {\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n        campaignFundedBy[campaignId].push(msg.sender);\r\n        campaignAmountFunded[campaignId] += msg.value;\r\n        funders.push(msg.sender);\r\n    }\r\n\r\n    function withdraw(uint256 amount, address receiver) public payable {\r\n        uint256 amountToBeWithdrawn = amount * 1e18;\r\n        (bool callSucess, ) = payable(receiver).call{\r\n            value: amountToBeWithdrawn\r\n        }(\"\");\r\n        if (!callSucess) {\r\n            revert Withdraw_NotSuccessful();\r\n        }\r\n    }\r\n\r\n    function getAmountFundedByFunder(\r\n        address funderAddress\r\n    ) public view returns (uint256) {\r\n        return addressToAmountFunded[funderAddress];\r\n    }\r\n\r\n    function getCampaignFunders(\r\n        uint256 campaignId\r\n    ) public view returns (address[] memory) {\r\n        return campaignFundedBy[campaignId];\r\n    }\r\n\r\n    function getCampaignTotalAmountFunded(\r\n        uint256 campaignId\r\n    ) public view returns (uint256) {\r\n        return campaignAmountFunded[campaignId];\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance / 1e18;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}